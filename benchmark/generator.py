#! /usr/bin/env python
# vim:set ts=4 sw=4:
"""
Script for generating random data for database benchmark test.

The database must be initialized before the script generated by
this program may be used. For database initialization use file
setup_db.sql which is in the same directory as this file. For
more detailed documentation see README file.
"""

import sys, os
import ConfigParser
from myrand import *

debug = True

def setDefaults():
	"""
Function sets defaults for directives found in configuration file
under section generator. Every directive has its default value.
	"""
	return {
"registrars":"20",
"domains":"500000",
"contacts":"1000000",
"nssets":"400000",
"msgs":"40"
}

def usage():
	"""
Print usage information.
	"""
	return "   " + sys.argv[0] + " [config]" + """

	config	- configuration file (default is bench.conf)
"""

def create_registrar(id):
	"""
Return SQL INSERT commands used for registrar creation.
	"""
	# insert into registrar table
	ins_registrar = "INSERT INTO registrar (handle, name, organization, street1,\
street2, street3, city, stateorprovince, postalcode, country, telephone, fax, \
email, url) VALUES ('registrar_%d', %s, %s, %s, %s, %s, %s, %s, %s, 'CZ', %s, \
%s, %s, %s);\n" % ( id, randstr(3,50), randstr(3,50), randstr(3,50), \
randstr(3,50), randstr(3,50), randstr(3,50), randstr(3,50), randstr(4,10), \
randstr(3,15), randstr(3,15), randstr(5,50), randstr(5,200) )
	# insert into registraracl table
	ins_registraracl = "INSERT INTO registraracl (registrarid, zoneid, cert, \
password) VALUES (%d, 3, 'ident:certsososososososososo-long', 'heslo');\n" % id
	# return the result
	return ins_registrar + ins_registraracl

def create_contact(regid, id, histid, actid):
	"""
Return SQL INSERT commands used for contact creation.
	"""
	handle = "'contact_%d'" % id
	roid = randstr(5,50)
	name = randstr(3,50)
	org = randstr(3,50)
	street1 = randstr(3,50)
	street2 = randstr(3,50)
	street3 = randstr(3,50)
	city = randstr(3,50)
	sp = randstr(3,50)
	pc = randstr(4,10)
	voice = randstr(3,15)
	fax = randstr(3,15)
	email = randint(5,50)
	disclname = randbool()
	disclorg = randbool()
	discladdress = randbool()
	disclvoice = randbool()
	disclfax = randbool()
	disclemail = randbool()
	notifyemail = randstr(5,50)
	vat = randstr(10,20)
	ssn = randstr(10,20)
	# insert into action table
	ins_action = "INSERT INTO action (clientid, action, response, clienttrid, \
servertrid) VALUES (%d, 204, 1000, 'crcontact_trid', %s);\n" \
% (regid, randstr(50, 120) )
	# insert into contact table
	ins_contact = "INSERT INTO contact (handle, roid, status, crid, name, \
organization, street1, street2, street3, city, stateorprovince, postalcode, \
country, telephone, fax, email, disclosename, discloseorganization, \
discloseaddress, disclosetelephone, disclosefax, discloseemail, notifyemail, \
vat, ssn) VALUES (%s, %s, '{1}', %d, %s, %s, %s, %s, %s, %s, %s, %s, 'CZ', %s, \
%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);\n" % ( handle, roid, regid, name, \
org, street1, street2, street3, city, sp, pc, voice, fax, email, disclname, \
disclorg, discladdress, disclvoice, disclfax, disclemail, notifyemail, vat, ssn )
	# insert into history table
	ins_history = "INSERT INTO history (action) VALUES (%d);\n" % actid
	# insert into contact_history table
	ins_contact_history = "INSERT INTO contact_history (historyid, id, handle, \
roid, status, crid, crdate, name, organization, street1, street2, street3, city,\
stateorprovince, postalcode, country, telephone, fax, email, disclosename, \
discloseorganization, discloseaddress, disclosetelephone, disclosefax, \
discloseemail, notifyemail, vat, ssn) VALUES (%d, %d, %s, %s, '{1}', %d, now(), \
%s, %s, %s, %s, %s, %s, %s, %s, 'CZ', %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, \
%s, %s);\n" % ( histid, id, handle, roid, regid, name, org, street1, street2, \
street3, city, sp, pc, voice, fax, email, disclname, disclorg, discladdress, \
disclvoice, disclfax, disclemail, notifyemail, vat, ssn )
	# return result
	return ins_action + ins_contact + ins_history + ins_contact_history


def create_nsset(regid, id, histid, actid, hostid, cid_min, cid_max):
	"""
Return SQL INSERT commands used for nsset creation.
	"""
	contactid = randint(cid_min, cid_max)
	handle = "'nsset_%d'" % id
	roid = randstr(5,50)
	authinfo = randstr(5,20)
	host_fqdn1 = randstr(5,20)
	host_fqdn2 = randstr(5,20)
	# insert into action table
	ins_action = "INSERT INTO action (clientid, action, response, clienttrid, \
servertrid) VALUES (%d, 404, 1000, 'crnsset_trid', %s);\n" \
% ( regid ,randstr(50,120) )
	# insert into nsset table
	ins_nsset = "INSERT INTO nsset (handle, roid, status, clid, crid, \
authinfopw) VALUES (%s, %s, '{1}', %d, %d, %s);\n" % ( handle, roid, regid, \
regid, authinfo )
	# insert into nsset_contact_map table
	ins_map_contact = "INSERT INTO nsset_contact_map (nssetid, contactid) VALUES\
(%d, %d);\n" % (id, contactid)
	# insert into host table
	ins_host1 = "INSERT INTO host (nssetid, fqdn, ipaddr) VALUES (%d, %s, \
'{127.0.0.1}');\n" % (id, host_fqdn1)
	# insert into host table
	ins_host2 = "INSERT INTO host (nssetid, fqdn, ipaddr) VALUES (%d, %s, \
'{127.0.0.1}');\n" % (id, host_fqdn2)
	# insert into history table
	ins_history = "INSERT INTO history (action) VALUES (%d);\n" % actid
	# insert into host_history table
	ins_host1_history = "INSERT INTO host_history (historyid, id, nssetid, fqdn,\
ipaddr) VALUES (%d, %d, %d, %s, '{127.0.0.1}');\n" % (histid, hostid, id, \
host_fqdn1)
	# insert into host_history table
	ins_host2_history = "INSERT INTO host_history (historyid, id, nssetid, fqdn,\
ipaddr) VALUES (%d, %d, %d, %s, '{127.0.0.1}');\n" % (histid, hostid + 1, id, \
host_fqdn2)
	# insert into nsset_contact_map_history table
	ins_map_contact_history = "INSERT INTO nsset_contact_map_history (historyid,\
nssetid, contactid) VALUES (%d, %d, %d);\n" % (histid, id, contactid)
	# insert into nsset_history table
	ins_nsset_history = "INSERT INTO nsset_history (historyid, id, handle, roid,\
status, clid, crid, crdate, authinfopw) VALUES (%d, %d, %s, %s, '{1}', %d, %d, \
now(), %s);\n" % ( histid, id, handle, roid, regid, regid, authinfo )
	# return result
	return ins_action + ins_nsset + ins_map_contact + ins_host1 + ins_host2 \
			+ ins_history + ins_map_contact_history + ins_host1_history \
			+ ins_host2_history + ins_nsset_history


def create_domain(regid, id, histid, actid, zoneratio, cid_min, cid_max, nid_min, nid_max):
	"""
Return SQL INSERT commands used for domain creation.
	"""
	if randint(1, zoneratio) == 1: zone = 1 # enum zone
	else: zone = 3 # mainstream cz zone
	roid = randstr(5,50)
	fqdn = "'domain%d.cz'" % id
	registrant = randint(cid_min, cid_max)
	admin = randint(cid_min, cid_max)
	nsset = randint(nid_min, nid_max)
	authinfo = randstr(5,20)
	# insert into action table
	ins_action = "INSERT INTO action (clientid, action, response, clienttrid, \
servertrid) VALUES (%d, 504, 1000, 'crdomain_trid', %s);\n" \
% ( regid , randstr(50, 120) )
	# insert into domain table
	ins_domain = "INSERT INTO domain (zone, roid, fqdn, status, registrant, \
nsset, clid, crid, exdate, authinfopw) VALUES (%d, %s, %s, '{1}', %d, %d, %d, \
%d, now() + '2 year', %s);\n" % ( zone, roid, fqdn, registrant, nsset, regid,\
regid, authinfo )
	if zone == 1:
		# insert into enumval table
		ins_enum = "INSERT INTO enumval (domainid, exdate) VALUES \
(%d, now() + '2 years');\n" % id
	# insert into domain_contact_map table
	ins_map_contact = "INSERT INTO domain_contact_map (domainid, contactid) \
VALUES (%d, %d);\n" % (id, admin)
	# insert into history table
	ins_history = "INSERT INTO history (action) VALUES (%d);\n" % actid
	# insert into domain_contact_map_history table
	ins_map_contact_history = "INSERT INTO domain_contact_map_history \
(historyid, domainid, contactid) VALUES (%d, %d, %d);\n" % (histid, id, admin)
	if zone == 1:
		# insert into enumval_history table
		ins_enum_history = "INSERT INTO enumval_history (historyid, domainid, \
exdate) VALUES (%d, %d, now() + '2 years');\n" % (histid, id)
	# insert into domain_history table
	ins_domain_history = "INSERT INTO domain_history (historyid, id, zone, roid,\
fqdn, status, registrant, nsset, clid, crid, crdate, exdate, authinfopw) VALUES \
(%d, %d, %d, %s, %s, '{1}', %d, %d, %d, %d, now(), now() + '2 year', %s);\n" \
% ( histid, id, zone, roid, fqdn, registrant, nsset, regid, regid, authinfo )
	if zone == 1:
		# return enum domain result
		return ins_action + ins_domain + ins_enum + ins_map_contact \
				+ ins_history + ins_map_contact_history + ins_enum_history \
				+ ins_domain_history
	else:
		# return ussual domain result
		return ins_action + ins_domain + ins_map_contact + ins_history \
				+ ins_map_contact_history + ins_domain_history

def create_msg(regid):
	"""
Return SQL INSERT command used for msg creation.
	"""
	return "INSERT INTO message (clid, exdate, message) VALUES (%d, now() \
+ '1 year', 'Zprava pro registratora');\n" % regid


if __name__ == "__main__":
	# get command line argument (config file)
	if len(sys.argv) > 2:
		sys.stderr.write(usage())
		sys.exit(1)
	if len(sys.argv) < 2: configfile = "bench.conf"
	else: configfile = sys.argv[1]
	# set config defaults and parse configuration file
	config = ConfigParser.ConfigParser(setDefaults())
	try:
		config.read([configfile])
	except ParsingError, e:
		sys.stderr.write("Error when parsing config %s: %s" % (configfile, e))
	# insert possibly missing sections
	if config.has_section("generator") == False: config.add_section("generator")
	if debug:
		sys.stderr.write("generator section: %s\n" % config.items("generator"))
	# generate registrar(acl) table
	registrars = config.getint("generator", "registrars")
	sys.stdout.write("\n--\n-- Registrar creation part (%d)\n--\n" % registrars)
	for i in range(1, registrars + 1):
		sys.stdout.write(create_registrar(i))
	# compute number of objects per 1 registrar
	contacts = config.getint("generator", "contacts") // registrars
	nssets = config.getint("generator", "nssets") // registrars
	domains = config.getint("generator", "domains") // registrars
	msgs = config.getint("generator", "msgs") // registrars
	contactid = 0
	nssetid = 0
	domainid = 0
	histid = 0
	actid = 0
	hostid = 1
	# simulate registrar one by one
	for regid in range(1, registrars + 1):
		if debug: sys.stderr.write("Registrar %d of %d\n" % (regid, registrars))
		# generate start-session commands
		sys.stdout.write("\n--\n-- Setting up pseudo session (regid %d)\n--\n" \
				% regid)
		sys.stdout.write("INSERT INTO login (registrarid, logintrid) VALUES \
(%d, 'logintrid_bench');\n" % regid)
		sys.stdout.write("INSERT INTO action (clientid, action, response, \
clienttrid, servertrid) VALUES (%d, 100, 1000, 'login_trid', %s);\n" \
% ( regid, randstr(50, 120) ))
		actid += 1
		# generate contact records
		sys.stdout.write("\n--\n-- Contact creation part (%d)\n--\n" % contacts)
		for i in range(1, contacts + 1):
			contactid += 1
			histid += 1
			actid += 1
			sys.stdout.write(create_contact(regid, contactid, histid, actid))
		# generate nsset records
		sys.stdout.write("\n--\n-- NSSet creation part (%d)\n--\n" % nssets)
		for i in range(1, nssets + 1):
			nssetid += 1
			histid += 1
			actid += 1
			sys.stdout.write(create_nsset(regid, nssetid, histid, actid, hostid,\
					contactid - contacts + 1, contactid))
			hostid += 2
		# generate domain records
		sys.stdout.write("\n--\n-- Domain creation part (%d)\n--\n" % domains)
		for i in range(1, domains + 1):
			domainid += 1
			histid += 1
			actid += 1
			sys.stdout.write(create_domain(regid, domainid, histid, actid, 3,\
					contactid - contacts + 1, contactid,\
					nssetid - nssets + 1, nssetid))
		# generate messages
		sys.stdout.write("\n--\n-- Message creation part (%d)\n--\n" % msgs)
		for i in range(1, msgs + 1):
			sys.stdout.write(create_msg(regid))

