#!/bin/bash

test_user () {
    if [ "$USER" != "postgres" ]
    then
        echo "Must be run under user 'postgres'"
        exit 1;
    fi
}
test_db () {
    psql -U @DBUSER@ -l | grep '@DBNAME@' > /dev/null
    return $?
}

f_usage () {
    echo "usage: fred-dbmanager [argument]
arguments:
    install - install FRED database
    uninstall - uninstall FRED database
    upgrade - upgrade FRED database with upgrade script
    status - print status of FRED database
    help - print this help"
    exit 0
}
init_pghba () {
    if [ "$PGDATA" = "" ]
    then
        PGHBA=@PGHBADIR@/pg_hba.conf
        PGDATA=@PGDATADIR@
    else
        PGHBA=$PGDATA/pg_hba.conf
    fi

    if [ ! -f $PGHBA ]
    then
        if [ "$1" = "" -o ! -f "$1" ]
        then
            echo "Cannot locate pg_hba.conf file"
        exit 2
        else
            PGHBA=$1
        fi
    fi
}

f_install () {
    test_user
    init_pghba

    if grep @DBUSER@ $PGHBA >/dev/null 2>&1
    then
        /bin/true
    else
        # There is no evidence about user @DBUSER@ in authentication file so
        # it can be suspected that user @DBUSER@ will not be allowed to connect
        # This file will be modified to allow local connection for user
        # @DBUSER@. If this is not intended modify database access options in
        # server @DBUSER@ server configuration files to suite you needs
        sed -i '1i# Next three lines were added by script '$0' \
# to allow local connection of user @DBUSER@ to database @DBNAME@ \
local @DBNAME@ @DBUSER@ @METHOD@ \
host @DBNAME@ @DBUSER@ @CIDRIPV4@ @METHOD@ \
host @DBNAME@ @DBUSER@ @CIDRIPV6@ @METHOD@ \
' $PGHBA

        # reload new file into postgres
        @PGBINDIR@/pg_ctl reload -D$PGDATA >/dev/null 2>&1
        if [ $? -ne 0 ]
        then
            echo "Reload of updated configuration failed, try to reload manualy"
            exit 3
        fi
    fi

    prefix=@prefix@
    datarootdir=@datarootdir@
    STRUCTSQL=@datadir@/@PACKAGE@/structure.sql 
    TABLES=$(echo "SELECT val FROM enum_parameters WHERE id=1" | 
             @PGBINDIR@/psql @DBNAME@ -U @DBUSER@ -At 2>/dev/null)
    if [ "$TABLES" = "" ]; then
        @PGBINDIR@/createuser @DBUSER@ -SDR > /dev/null 2>&1
        @PGBINDIR@/createdb @DBNAME@ -O @DBUSER@ -E UTF8 > /dev/null 2>&1
        @PGBINDIR@/createlang -U postgres plpgsql @DBNAME@ > /dev/null 2>&1
        @PGBINDIR@/psql @DBNAME@ -U @DBUSER@ -f $STRUCTSQL >/dev/null 2>&1
    fi
}

f_uninstall () {
    test_user
    init_pghba

    @PGBINDIR@/dropdb -U @DBUSER@ @DBNAME@ > /dev/null 2>&1
    @PGBINDIR@/dropuser -U postgres @DBUSER@ > /dev/null 2>&1
    if grep @DBUSER@ $PGHBA > /dev/null 2>&1
    then
        sed -i '1,6d' $PGHBA
    fi
}

f_upgrade () {
    test_user
    echo "upgrade"
}

f_status () {
    test_db
    if [ $? != 0 ]
    then
        echo "@DBNAME@ database does not exist or postgres server does not running."
        exit 1
    else
        ver=`psql -U @DBUSER@ -d @DBNAME@ -R'*' -c 'select * from enum_parameters where id=1;' | grep 'model_version' | cut -d'|' -f3`
        echo "@DBNAME@ database version:$ver"
        exit 0
    fi
}


if [ $0 = "" ]
then
    f_usage
else
    case $1 in
        "install") f_install;;
        "uninstall") f_uninstall;;
        "upgrade" ) f_upgrade;;
        "status" ) f_status;;
        "help" ) f_usage;;
        *) echo "Unknown argument"; f_usage;;
    esac
fi
